Problems with current bindings:

P1) SWIG cannot parse C++15, and it will always lag
P2) Python code is not compiled/tested together with C++ codebase
P3) Albeit SWIG is there to help "automagic" current code base has explicit code for every class (and class member) of interest
P4) Current __init__.py has a lot of "python magic" to get things running, code is spread around multiple pieces
P5) Current python bindings do not work at all

The boost python approach helps because:
a) P1 is solved out of the box, since no C++ parsing is involved
b) P2 is mitigated since python bindings are also in C++. Any missmatch with generate a compilation error.
c) P3. P4 and P5 are expected to be handled by having less spagethi and aiming for tighter integration with rest of code-base (point b)



Requirements
============

For python requirements see requirements.txt

C++ requirements:
 Halide compiled (assuming halide_git_clone_path/build).
 For a better python experience make sure Halide was compiled with WITH_EXCEPTIONS
 Boost.python (already available in most boost distributions)
 Recommended (used for I/O): Boost.Numpy https://github.com/ndarray/Boost.NumPy


Compilation instructions
========================

Build using:
  mkdir build
  cd build
  ccmake ..
  make 


