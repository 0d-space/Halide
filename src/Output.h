#ifndef HALIDE_OUTPUTS_H
#define HALIDE_OUTPUTS_H

/** \file
 *
 * Defines the Output interface and baisc compiler output types
 * generated by Halide.
 */

#include "IntrusivePtr.h"
#include "CodeGen_LLVM.h"

namespace Halide {
namespace Internal {

/** Interface for generating a compiler build result from a
 * CodeGen_LLVM instance. */
class OutputBase {
public:
    mutable RefCount ref_count;

    virtual ~OutputBase() {}

    /** Generate the output(s) defined by this Output. */
    virtual void generate(CodeGen_LLVM *codegen) = 0;
};

template<>
EXPORT inline RefCount &ref_count<OutputBase>(const OutputBase *o) {return o->ref_count;}

template<>
EXPORT inline void destroy<OutputBase>(const OutputBase *o) {delete o;}

}

/** A reference counted handle to a particular type of Halide compiler
 * output. */
class Output {
    Internal::IntrusivePtr<Internal::OutputBase> contents;

public:
    Output() : contents(NULL) {}
    Output(const Internal::IntrusivePtr<Internal::OutputBase> &c) : contents(c) {}
    Output(const Output &c) : contents(c.contents) {}

    /** Given some compiled LLVM, generate the compiler output
     * represented by this Output. */
    void generate(Internal::CodeGen_LLVM *codegen) { contents.ptr->generate(codegen); }

    /** Create an Output describing LLVM bitcode. */
    static Output bitcode(const std::string &filename);
    /** Create an Output describing an object file. */
    static Output object(const std::string &filename);
    /** Create an Output describing a text assembly listing. */
    static Output assembly(const std::string &filename);
    /** Create an Output describing a text LLVM assembly listing. */
    static Output llvm_assembly(const std::string &filename);
};

}

#endif
