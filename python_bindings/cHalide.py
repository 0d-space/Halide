# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cHalide', [dirname(__file__)])
        except ImportError:
            import _cHalide
            return _cHalide
        if fp is not None:
            try:
                _mod = imp.load_module('_cHalide', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cHalide = swig_import_helper()
    del swig_import_helper
else:
    import _cHalide
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cHalide.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _cHalide.SwigPyIterator_value(self)
    def incr(self, n=1): return _cHalide.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _cHalide.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _cHalide.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _cHalide.SwigPyIterator_equal(self, *args)
    def copy(self): return _cHalide.SwigPyIterator_copy(self)
    def next(self): return _cHalide.SwigPyIterator_next(self)
    def __next__(self): return _cHalide.SwigPyIterator___next__(self)
    def previous(self): return _cHalide.SwigPyIterator_previous(self)
    def advance(self, *args): return _cHalide.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _cHalide.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _cHalide.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _cHalide.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _cHalide.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _cHalide.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _cHalide.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _cHalide.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Type, name)
    __repr__ = _swig_repr
    Int = _cHalide.Type_Int
    UInt = _cHalide.Type_UInt
    Float = _cHalide.Type_Float
    __swig_setmethods__["t"] = _cHalide.Type_t_set
    __swig_getmethods__["t"] = _cHalide.Type_t_get
    if _newclass:t = _swig_property(_cHalide.Type_t_get, _cHalide.Type_t_set)
    __swig_setmethods__["bits"] = _cHalide.Type_bits_set
    __swig_getmethods__["bits"] = _cHalide.Type_bits_get
    if _newclass:bits = _swig_property(_cHalide.Type_bits_get, _cHalide.Type_bits_set)
    __swig_setmethods__["width"] = _cHalide.Type_width_set
    __swig_getmethods__["width"] = _cHalide.Type_width_get
    if _newclass:width = _swig_property(_cHalide.Type_width_get, _cHalide.Type_width_set)
    def is_bool(self): return _cHalide.Type_is_bool(self)
    def is_vector(self): return _cHalide.Type_is_vector(self)
    def is_scalar(self): return _cHalide.Type_is_scalar(self)
    def is_float(self): return _cHalide.Type_is_float(self)
    def is_int(self): return _cHalide.Type_is_int(self)
    def is_uint(self): return _cHalide.Type_is_uint(self)
    def __eq__(self, *args): return _cHalide.Type___eq__(self, *args)
    def __ne__(self, *args): return _cHalide.Type___ne__(self, *args)
    def vector_of(self, *args): return _cHalide.Type_vector_of(self, *args)
    def element_of(self): return _cHalide.Type_element_of(self)
    def imax(self): return _cHalide.Type_imax(self)
    def max(self): return _cHalide.Type_max(self)
    def imin(self): return _cHalide.Type_imin(self)
    def min(self): return _cHalide.Type_min(self)
    def __init__(self): 
        this = _cHalide.new_Type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cHalide.delete_Type
    __del__ = lambda self : None;
Type_swigregister = _cHalide.Type_swigregister
Type_swigregister(Type)


def Int(*args):
  return _cHalide.Int(*args)
Int = _cHalide.Int

def UInt(*args):
  return _cHalide.UInt(*args)
UInt = _cHalide.UInt

def Float(*args):
  return _cHalide.Float(*args)
Float = _cHalide.Float

def Bool(width=1):
  return _cHalide.Bool(width)
Bool = _cHalide.Bool
class Argument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Argument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Argument, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _cHalide.Argument_name_set
    __swig_getmethods__["name"] = _cHalide.Argument_name_get
    if _newclass:name = _swig_property(_cHalide.Argument_name_get, _cHalide.Argument_name_set)
    __swig_setmethods__["is_buffer"] = _cHalide.Argument_is_buffer_set
    __swig_getmethods__["is_buffer"] = _cHalide.Argument_is_buffer_get
    if _newclass:is_buffer = _swig_property(_cHalide.Argument_is_buffer_get, _cHalide.Argument_is_buffer_set)
    __swig_setmethods__["type"] = _cHalide.Argument_type_set
    __swig_getmethods__["type"] = _cHalide.Argument_type_get
    if _newclass:type = _swig_property(_cHalide.Argument_type_get, _cHalide.Argument_type_set)
    def __init__(self, *args): 
        this = _cHalide.new_Argument(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cHalide.delete_Argument
    __del__ = lambda self : None;
Argument_swigregister = _cHalide.Argument_swigregister
Argument_swigregister(Argument)

class buffer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, buffer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, buffer_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dev"] = _cHalide.buffer_t_dev_set
    __swig_getmethods__["dev"] = _cHalide.buffer_t_dev_get
    if _newclass:dev = _swig_property(_cHalide.buffer_t_dev_get, _cHalide.buffer_t_dev_set)
    __swig_setmethods__["host"] = _cHalide.buffer_t_host_set
    __swig_getmethods__["host"] = _cHalide.buffer_t_host_get
    if _newclass:host = _swig_property(_cHalide.buffer_t_host_get, _cHalide.buffer_t_host_set)
    __swig_setmethods__["extent"] = _cHalide.buffer_t_extent_set
    __swig_getmethods__["extent"] = _cHalide.buffer_t_extent_get
    if _newclass:extent = _swig_property(_cHalide.buffer_t_extent_get, _cHalide.buffer_t_extent_set)
    __swig_setmethods__["stride"] = _cHalide.buffer_t_stride_set
    __swig_getmethods__["stride"] = _cHalide.buffer_t_stride_get
    if _newclass:stride = _swig_property(_cHalide.buffer_t_stride_get, _cHalide.buffer_t_stride_set)
    __swig_setmethods__["min"] = _cHalide.buffer_t_min_set
    __swig_getmethods__["min"] = _cHalide.buffer_t_min_get
    if _newclass:min = _swig_property(_cHalide.buffer_t_min_get, _cHalide.buffer_t_min_set)
    __swig_setmethods__["elem_size"] = _cHalide.buffer_t_elem_size_set
    __swig_getmethods__["elem_size"] = _cHalide.buffer_t_elem_size_get
    if _newclass:elem_size = _swig_property(_cHalide.buffer_t_elem_size_get, _cHalide.buffer_t_elem_size_set)
    __swig_setmethods__["host_dirty"] = _cHalide.buffer_t_host_dirty_set
    __swig_getmethods__["host_dirty"] = _cHalide.buffer_t_host_dirty_get
    if _newclass:host_dirty = _swig_property(_cHalide.buffer_t_host_dirty_get, _cHalide.buffer_t_host_dirty_set)
    __swig_setmethods__["dev_dirty"] = _cHalide.buffer_t_dev_dirty_set
    __swig_getmethods__["dev_dirty"] = _cHalide.buffer_t_dev_dirty_get
    if _newclass:dev_dirty = _swig_property(_cHalide.buffer_t_dev_dirty_get, _cHalide.buffer_t_dev_dirty_set)
    def __init__(self): 
        this = _cHalide.new_buffer_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cHalide.delete_buffer_t
    __del__ = lambda self : None;
buffer_t_swigregister = _cHalide.buffer_t_swigregister
buffer_t_swigregister(buffer_t)

class Buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Buffer(*args)
        try: self.this.append(this)
        except: self.this = this
    def host_ptr(self): return _cHalide.Buffer_host_ptr(self)
    def raw_buffer(self): return _cHalide.Buffer_raw_buffer(self)
    def device_handle(self): return _cHalide.Buffer_device_handle(self)
    def host_dirty(self): return _cHalide.Buffer_host_dirty(self)
    def set_host_dirty(self, dirty=True): return _cHalide.Buffer_set_host_dirty(self, dirty)
    def device_dirty(self): return _cHalide.Buffer_device_dirty(self)
    def set_device_dirty(self, dirty=True): return _cHalide.Buffer_set_device_dirty(self, dirty)
    def dimensions(self): return _cHalide.Buffer_dimensions(self)
    def extent(self, *args): return _cHalide.Buffer_extent(self, *args)
    def stride(self, *args): return _cHalide.Buffer_stride(self, *args)
    def min(self, *args): return _cHalide.Buffer_min(self, *args)
    def type(self): return _cHalide.Buffer_type(self)
    def same_as(self, *args): return _cHalide.Buffer_same_as(self, *args)
    def defined(self): return _cHalide.Buffer_defined(self)
    def name(self): return _cHalide.Buffer_name(self)
    def set_source_module(self, *args): return _cHalide.Buffer_set_source_module(self, *args)
    def source_module(self): return _cHalide.Buffer_source_module(self)
    def copy_to_host(self): return _cHalide.Buffer_copy_to_host(self)
    def copy_to_dev(self): return _cHalide.Buffer_copy_to_dev(self)
    def free_dev_buffer(self): return _cHalide.Buffer_free_dev_buffer(self)
    __swig_destroy__ = _cHalide.delete_Buffer
    __del__ = lambda self : None;
Buffer_swigregister = _cHalide.Buffer_swigregister
Buffer_swigregister(Buffer)

class Expr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Expr(*args)
        try: self.this.append(this)
        except: self.this = this
    def type(self): return _cHalide.Expr_type(self)
    __swig_destroy__ = _cHalide.delete_Expr
    __del__ = lambda self : None;
Expr_swigregister = _cHalide.Expr_swigregister
Expr_swigregister(Expr)

class Var(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Var, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Var, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Var(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _cHalide.Var_name(self)
    def same_as(self, *args): return _cHalide.Var_same_as(self, *args)
    __swig_getmethods__["implicit"] = lambda x: _cHalide.Var_implicit
    if _newclass:implicit = staticmethod(_cHalide.Var_implicit)
    __swig_destroy__ = _cHalide.delete_Var
    __del__ = lambda self : None;
Var_swigregister = _cHalide.Var_swigregister
Var_swigregister(Var)

def Var_implicit(*args):
  return _cHalide.Var_implicit(*args)
Var_implicit = _cHalide.Var_implicit

class ImageParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageParam, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_ImageParam(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _cHalide.ImageParam_name(self)
    def type(self): return _cHalide.ImageParam_type(self)
    def set(self, *args): return _cHalide.ImageParam_set(self, *args)
    def get(self): return _cHalide.ImageParam_get(self)
    def defined(self): return _cHalide.ImageParam_defined(self)
    def extent(self, *args): return _cHalide.ImageParam_extent(self, *args)
    def stride(self, *args): return _cHalide.ImageParam_stride(self, *args)
    def set_extent(self, *args): return _cHalide.ImageParam_set_extent(self, *args)
    def set_min(self, *args): return _cHalide.ImageParam_set_min(self, *args)
    def set_stride(self, *args): return _cHalide.ImageParam_set_stride(self, *args)
    def set_bounds(self, *args): return _cHalide.ImageParam_set_bounds(self, *args)
    def dimensions(self): return _cHalide.ImageParam_dimensions(self)
    def width(self): return _cHalide.ImageParam_width(self)
    def height(self): return _cHalide.ImageParam_height(self)
    def channels(self): return _cHalide.ImageParam_channels(self)
    def __call__(self, *args): return _cHalide.ImageParam___call__(self, *args)
    __swig_destroy__ = _cHalide.delete_ImageParam
    __del__ = lambda self : None;
ImageParam_swigregister = _cHalide.ImageParam_swigregister
ImageParam_swigregister(ImageParam)

class RVar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RVar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RVar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_RVar(*args)
        try: self.this.append(this)
        except: self.this = this
    def min(self): return _cHalide.RVar_min(self)
    def extent(self): return _cHalide.RVar_extent(self)
    def name(self): return _cHalide.RVar_name(self)
    __swig_destroy__ = _cHalide.delete_RVar
    __del__ = lambda self : None;
RVar_swigregister = _cHalide.RVar_swigregister
RVar_swigregister(RVar)

class RDom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RDom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RDom, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_RDom(*args)
        try: self.this.append(this)
        except: self.this = this
    def defined(self): return _cHalide.RDom_defined(self)
    def same_as(self, *args): return _cHalide.RDom_same_as(self, *args)
    def dimensions(self): return _cHalide.RDom_dimensions(self)
    __swig_setmethods__["x"] = _cHalide.RDom_x_set
    __swig_getmethods__["x"] = _cHalide.RDom_x_get
    if _newclass:x = _swig_property(_cHalide.RDom_x_get, _cHalide.RDom_x_set)
    __swig_setmethods__["y"] = _cHalide.RDom_y_set
    __swig_getmethods__["y"] = _cHalide.RDom_y_get
    if _newclass:y = _swig_property(_cHalide.RDom_y_get, _cHalide.RDom_y_set)
    __swig_setmethods__["z"] = _cHalide.RDom_z_set
    __swig_getmethods__["z"] = _cHalide.RDom_z_get
    if _newclass:z = _swig_property(_cHalide.RDom_z_get, _cHalide.RDom_z_set)
    __swig_setmethods__["w"] = _cHalide.RDom_w_set
    __swig_getmethods__["w"] = _cHalide.RDom_w_get
    if _newclass:w = _swig_property(_cHalide.RDom_w_get, _cHalide.RDom_w_set)
    __swig_destroy__ = _cHalide.delete_RDom
    __del__ = lambda self : None;
RDom_swigregister = _cHalide.RDom_swigregister
RDom_swigregister(RDom)

class FuncRefVar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuncRefVar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FuncRefVar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_FuncRefVar(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iadd__(self, *args): return _cHalide.FuncRefVar___iadd__(self, *args)
    def __isub__(self, *args): return _cHalide.FuncRefVar___isub__(self, *args)
    def __imul__(self, *args): return _cHalide.FuncRefVar___imul__(self, *args)
    def __idiv__(self, *args): return _cHalide.FuncRefVar___idiv__(self, *args)
    __swig_destroy__ = _cHalide.delete_FuncRefVar
    __del__ = lambda self : None;
FuncRefVar_swigregister = _cHalide.FuncRefVar_swigregister
FuncRefVar_swigregister(FuncRefVar)

class FuncRefExpr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuncRefExpr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FuncRefExpr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_FuncRefExpr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iadd__(self, *args): return _cHalide.FuncRefExpr___iadd__(self, *args)
    def __isub__(self, *args): return _cHalide.FuncRefExpr___isub__(self, *args)
    def __imul__(self, *args): return _cHalide.FuncRefExpr___imul__(self, *args)
    def __idiv__(self, *args): return _cHalide.FuncRefExpr___idiv__(self, *args)
    __swig_destroy__ = _cHalide.delete_FuncRefExpr
    __del__ = lambda self : None;
FuncRefExpr_swigregister = _cHalide.FuncRefExpr_swigregister
FuncRefExpr_swigregister(FuncRefExpr)

class ScheduleHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScheduleHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScheduleHandle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_ScheduleHandle(*args)
        try: self.this.append(this)
        except: self.this = this
    def split(self, *args): return _cHalide.ScheduleHandle_split(self, *args)
    def parallel(self, *args): return _cHalide.ScheduleHandle_parallel(self, *args)
    def vectorize(self, *args): return _cHalide.ScheduleHandle_vectorize(self, *args)
    def unroll(self, *args): return _cHalide.ScheduleHandle_unroll(self, *args)
    def bound(self, *args): return _cHalide.ScheduleHandle_bound(self, *args)
    def tile(self, *args): return _cHalide.ScheduleHandle_tile(self, *args)
    def reorder(self, *args): return _cHalide.ScheduleHandle_reorder(self, *args)
    def rename(self, *args): return _cHalide.ScheduleHandle_rename(self, *args)
    def cuda_threads(self, *args): return _cHalide.ScheduleHandle_cuda_threads(self, *args)
    def cuda_blocks(self, *args): return _cHalide.ScheduleHandle_cuda_blocks(self, *args)
    def cuda(self, *args): return _cHalide.ScheduleHandle_cuda(self, *args)
    def cuda_tile(self, *args): return _cHalide.ScheduleHandle_cuda_tile(self, *args)
    __swig_destroy__ = _cHalide.delete_ScheduleHandle
    __del__ = lambda self : None;
ScheduleHandle_swigregister = _cHalide.ScheduleHandle_swigregister
ScheduleHandle_swigregister(ScheduleHandle)

class Func(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Func, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Func, name)
    __repr__ = _swig_repr
    __swig_getmethods__["test"] = lambda x: _cHalide.Func_test
    if _newclass:test = staticmethod(_cHalide.Func_test)
    def __init__(self, *args): 
        this = _cHalide.new_Func(*args)
        try: self.this.append(this)
        except: self.this = this
    def realize(self, *args): return _cHalide.Func_realize(self, *args)
    def compile_to_bitcode(self, *args): return _cHalide.Func_compile_to_bitcode(self, *args)
    def compile_to_object(self, *args): return _cHalide.Func_compile_to_object(self, *args)
    def compile_to_header(self, *args): return _cHalide.Func_compile_to_header(self, *args)
    def compile_to_assembly(self, *args): return _cHalide.Func_compile_to_assembly(self, *args)
    def compile_to_c(self, *args): return _cHalide.Func_compile_to_c(self, *args)
    def compile_to_file(self, *args): return _cHalide.Func_compile_to_file(self, *args)
    def compile_jit(self): return _cHalide.Func_compile_jit(self)
    def set_error_handler(self, *args): return _cHalide.Func_set_error_handler(self, *args)
    def set_custom_allocator(self, *args): return _cHalide.Func_set_custom_allocator(self, *args)
    def set_custom_do_task(self, *args): return _cHalide.Func_set_custom_do_task(self, *args)
    def set_custom_do_par_for(self, *args): return _cHalide.Func_set_custom_do_par_for(self, *args)
    def debug_to_file(self, *args): return _cHalide.Func_debug_to_file(self, *args)
    def name(self): return _cHalide.Func_name(self)
    def value(self): return _cHalide.Func_value(self)
    def dimensions(self): return _cHalide.Func_dimensions(self)
    def __call__(self, *args): return _cHalide.Func___call__(self, *args)
    def split(self, *args): return _cHalide.Func_split(self, *args)
    def parallel(self, *args): return _cHalide.Func_parallel(self, *args)
    def vectorize(self, *args): return _cHalide.Func_vectorize(self, *args)
    def unroll(self, *args): return _cHalide.Func_unroll(self, *args)
    def bound(self, *args): return _cHalide.Func_bound(self, *args)
    def tile(self, *args): return _cHalide.Func_tile(self, *args)
    def reorder(self, *args): return _cHalide.Func_reorder(self, *args)
    def rename(self, *args): return _cHalide.Func_rename(self, *args)
    def cuda_threads(self, *args): return _cHalide.Func_cuda_threads(self, *args)
    def cuda_blocks(self, *args): return _cHalide.Func_cuda_blocks(self, *args)
    def cuda(self, *args): return _cHalide.Func_cuda(self, *args)
    def cuda_tile(self, *args): return _cHalide.Func_cuda_tile(self, *args)
    def reorder_storage(self, *args): return _cHalide.Func_reorder_storage(self, *args)
    def compute_at(self, *args): return _cHalide.Func_compute_at(self, *args)
    def compute_root(self): return _cHalide.Func_compute_root(self)
    def store_at(self, *args): return _cHalide.Func_store_at(self, *args)
    def store_root(self): return _cHalide.Func_store_root(self)
    def compute_inline(self): return _cHalide.Func_compute_inline(self)
    def update(self): return _cHalide.Func_update(self)
    def function(self): return _cHalide.Func_function(self)
    __swig_destroy__ = _cHalide.delete_Func
    __del__ = lambda self : None;
Func_swigregister = _cHalide.Func_swigregister
Func_swigregister(Func)

def Func_test():
  return _cHalide.Func_test()
Func_test = _cHalide.Func_test


def sum(*args):
  return _cHalide.sum(*args)
sum = _cHalide.sum

def product(*args):
  return _cHalide.product(*args)
product = _cHalide.product

def maximum(*args):
  return _cHalide.maximum(*args)
maximum = _cHalide.maximum

def minimum(*args):
  return _cHalide.minimum(*args)
minimum = _cHalide.minimum

def cast(*args):
  return _cHalide.cast(*args)
cast = _cHalide.cast

def __add__(*args):
  return _cHalide.__add__(*args)
__add__ = _cHalide.__add__

def __iadd__(*args):
  return _cHalide.__iadd__(*args)
__iadd__ = _cHalide.__iadd__

def __sub__(*args):
  return _cHalide.__sub__(*args)
__sub__ = _cHalide.__sub__

def __isub__(*args):
  return _cHalide.__isub__(*args)
__isub__ = _cHalide.__isub__

def __mul__(*args):
  return _cHalide.__mul__(*args)
__mul__ = _cHalide.__mul__

def __imul__(*args):
  return _cHalide.__imul__(*args)
__imul__ = _cHalide.__imul__

def __div__(*args):
  return _cHalide.__div__(*args)
__div__ = _cHalide.__div__

def __idiv__(*args):
  return _cHalide.__idiv__(*args)
__idiv__ = _cHalide.__idiv__

def __mod__(*args):
  return _cHalide.__mod__(*args)
__mod__ = _cHalide.__mod__

def __gt__(*args):
  return _cHalide.__gt__(*args)
__gt__ = _cHalide.__gt__

def __lt__(*args):
  return _cHalide.__lt__(*args)
__lt__ = _cHalide.__lt__

def __le__(*args):
  return _cHalide.__le__(*args)
__le__ = _cHalide.__le__

def __ge__(*args):
  return _cHalide.__ge__(*args)
__ge__ = _cHalide.__ge__

def __eq__(*args):
  return _cHalide.__eq__(*args)
__eq__ = _cHalide.__eq__

def __ne__(*args):
  return _cHalide.__ne__(*args)
__ne__ = _cHalide.__ne__

def max(*args):
  return _cHalide.max(*args)
max = _cHalide.max

def min(*args):
  return _cHalide.min(*args)
min = _cHalide.min

def clamp(*args):
  return _cHalide.clamp(*args)
clamp = _cHalide.clamp

def abs(*args):
  return _cHalide.abs(*args)
abs = _cHalide.abs

def select(*args):
  return _cHalide.select(*args)
select = _cHalide.select

def sin(*args):
  return _cHalide.sin(*args)
sin = _cHalide.sin

def asin(*args):
  return _cHalide.asin(*args)
asin = _cHalide.asin

def cos(*args):
  return _cHalide.cos(*args)
cos = _cHalide.cos

def acos(*args):
  return _cHalide.acos(*args)
acos = _cHalide.acos

def tan(*args):
  return _cHalide.tan(*args)
tan = _cHalide.tan

def atan(*args):
  return _cHalide.atan(*args)
atan = _cHalide.atan

def sinh(*args):
  return _cHalide.sinh(*args)
sinh = _cHalide.sinh

def asinh(*args):
  return _cHalide.asinh(*args)
asinh = _cHalide.asinh

def cosh(*args):
  return _cHalide.cosh(*args)
cosh = _cHalide.cosh

def acosh(*args):
  return _cHalide.acosh(*args)
acosh = _cHalide.acosh

def tanh(*args):
  return _cHalide.tanh(*args)
tanh = _cHalide.tanh

def atanh(*args):
  return _cHalide.atanh(*args)
atanh = _cHalide.atanh

def sqrt(*args):
  return _cHalide.sqrt(*args)
sqrt = _cHalide.sqrt

def hypot(*args):
  return _cHalide.hypot(*args)
hypot = _cHalide.hypot

def exp(*args):
  return _cHalide.exp(*args)
exp = _cHalide.exp

def log(*args):
  return _cHalide.log(*args)
log = _cHalide.log

def pow(*args):
  return _cHalide.pow(*args)
pow = _cHalide.pow

def fast_log(*args):
  return _cHalide.fast_log(*args)
fast_log = _cHalide.fast_log

def fast_exp(*args):
  return _cHalide.fast_exp(*args)
fast_exp = _cHalide.fast_exp

def fast_pow(*args):
  return _cHalide.fast_pow(*args)
fast_pow = _cHalide.fast_pow

def floor(*args):
  return _cHalide.floor(*args)
floor = _cHalide.floor

def ceil(*args):
  return _cHalide.ceil(*args)
ceil = _cHalide.ceil

def round(*args):
  return _cHalide.round(*args)
round = _cHalide.round

def reinterpret(*args):
  return _cHalide.reinterpret(*args)
reinterpret = _cHalide.reinterpret

def __and__(*args):
  return _cHalide.__and__(*args)
__and__ = _cHalide.__and__

def __or__(*args):
  return _cHalide.__or__(*args)
__or__ = _cHalide.__or__

def __xor__(*args):
  return _cHalide.__xor__(*args)
__xor__ = _cHalide.__xor__

def __invert__(*args):
  return _cHalide.__invert__(*args)
__invert__ = _cHalide.__invert__

def __lshift__(*args):
  return _cHalide.__lshift__(*args)
__lshift__ = _cHalide.__lshift__

def __rshift__(*args):
  return _cHalide.__rshift__(*args)
__rshift__ = _cHalide.__rshift__

def _lambda(*args):
  return _cHalide._lambda(*args)
_lambda = _cHalide._lambda

def add(*args):
  return _cHalide.add(*args)
add = _cHalide.add

def sub(*args):
  return _cHalide.sub(*args)
sub = _cHalide.sub

def neg(*args):
  return _cHalide.neg(*args)
neg = _cHalide.neg

def mul(*args):
  return _cHalide.mul(*args)
mul = _cHalide.mul

def div(*args):
  return _cHalide.div(*args)
div = _cHalide.div

def mod(*args):
  return _cHalide.mod(*args)
mod = _cHalide.mod

def expr_from_int(*args):
  return _cHalide.expr_from_int(*args)
expr_from_int = _cHalide.expr_from_int

def lt(*args):
  return _cHalide.lt(*args)
lt = _cHalide.lt

def le(*args):
  return _cHalide.le(*args)
le = _cHalide.le

def eq(*args):
  return _cHalide.eq(*args)
eq = _cHalide.eq

def ne(*args):
  return _cHalide.ne(*args)
ne = _cHalide.ne

def gt(*args):
  return _cHalide.gt(*args)
gt = _cHalide.gt

def ge(*args):
  return _cHalide.ge(*args)
ge = _cHalide.ge

def and_op(*args):
  return _cHalide.and_op(*args)
and_op = _cHalide.and_op

def or_op(*args):
  return _cHalide.or_op(*args)
or_op = _cHalide.or_op

def invert(*args):
  return _cHalide.invert(*args)
invert = _cHalide.invert

def iadd(*args):
  return _cHalide.iadd(*args)
iadd = _cHalide.iadd

def isub(*args):
  return _cHalide.isub(*args)
isub = _cHalide.isub

def imul(*args):
  return _cHalide.imul(*args)
imul = _cHalide.imul

def idiv(*args):
  return _cHalide.idiv(*args)
idiv = _cHalide.idiv

def minimum_func(*args):
  return _cHalide.minimum_func(*args)
minimum_func = _cHalide.minimum_func

def maximum_func(*args):
  return _cHalide.maximum_func(*args)
maximum_func = _cHalide.maximum_func

def product_func(*args):
  return _cHalide.product_func(*args)
product_func = _cHalide.product_func

def sum_func(*args):
  return _cHalide.sum_func(*args)
sum_func = _cHalide.sum_func

def call(*args):
  return _cHalide.call(*args)
call = _cHalide.call

def set(*args):
  return _cHalide.set(*args)
set = _cHalide.set

def load_png(*args):
  return _cHalide.load_png(*args)
load_png = _cHalide.load_png

def save_png(*args):
  return _cHalide.save_png(*args)
save_png = _cHalide.save_png

def exit_on_signal():
  return _cHalide.exit_on_signal()
exit_on_signal = _cHalide.exit_on_signal

def image_to_string(*args):
  return _cHalide.image_to_string(*args)
image_to_string = _cHalide.image_to_string

def to_buffer(*args):
  return _cHalide.to_buffer(*args)
to_buffer = _cHalide.to_buffer

def assign_array(*args):
  return _cHalide.assign_array(*args)
assign_array = _cHalide.assign_array
class Image_uint8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image_uint8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image_uint8, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Image_uint8(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy_to_host(self): return _cHalide.Image_uint8_copy_to_host(self)
    def set_host_dirty(self, dirty=True): return _cHalide.Image_uint8_set_host_dirty(self, dirty)
    def defined(self): return _cHalide.Image_uint8_defined(self)
    def dimensions(self): return _cHalide.Image_uint8_dimensions(self)
    def extent(self, *args): return _cHalide.Image_uint8_extent(self, *args)
    def stride(self, *args): return _cHalide.Image_uint8_stride(self, *args)
    def width(self): return _cHalide.Image_uint8_width(self)
    def height(self): return _cHalide.Image_uint8_height(self)
    def channels(self): return _cHalide.Image_uint8_channels(self)
    def data(self): return _cHalide.Image_uint8_data(self)
    def __call__(self, *args): return _cHalide.Image_uint8___call__(self, *args)
    __swig_destroy__ = _cHalide.delete_Image_uint8
    __del__ = lambda self : None;
Image_uint8_swigregister = _cHalide.Image_uint8_swigregister
Image_uint8_swigregister(Image_uint8)

class Image_uint16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image_uint16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image_uint16, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Image_uint16(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy_to_host(self): return _cHalide.Image_uint16_copy_to_host(self)
    def set_host_dirty(self, dirty=True): return _cHalide.Image_uint16_set_host_dirty(self, dirty)
    def defined(self): return _cHalide.Image_uint16_defined(self)
    def dimensions(self): return _cHalide.Image_uint16_dimensions(self)
    def extent(self, *args): return _cHalide.Image_uint16_extent(self, *args)
    def stride(self, *args): return _cHalide.Image_uint16_stride(self, *args)
    def width(self): return _cHalide.Image_uint16_width(self)
    def height(self): return _cHalide.Image_uint16_height(self)
    def channels(self): return _cHalide.Image_uint16_channels(self)
    def data(self): return _cHalide.Image_uint16_data(self)
    def __call__(self, *args): return _cHalide.Image_uint16___call__(self, *args)
    __swig_destroy__ = _cHalide.delete_Image_uint16
    __del__ = lambda self : None;
Image_uint16_swigregister = _cHalide.Image_uint16_swigregister
Image_uint16_swigregister(Image_uint16)

class Image_uint32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image_uint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image_uint32, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Image_uint32(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy_to_host(self): return _cHalide.Image_uint32_copy_to_host(self)
    def set_host_dirty(self, dirty=True): return _cHalide.Image_uint32_set_host_dirty(self, dirty)
    def defined(self): return _cHalide.Image_uint32_defined(self)
    def dimensions(self): return _cHalide.Image_uint32_dimensions(self)
    def extent(self, *args): return _cHalide.Image_uint32_extent(self, *args)
    def stride(self, *args): return _cHalide.Image_uint32_stride(self, *args)
    def width(self): return _cHalide.Image_uint32_width(self)
    def height(self): return _cHalide.Image_uint32_height(self)
    def channels(self): return _cHalide.Image_uint32_channels(self)
    def data(self): return _cHalide.Image_uint32_data(self)
    def __call__(self, *args): return _cHalide.Image_uint32___call__(self, *args)
    __swig_destroy__ = _cHalide.delete_Image_uint32
    __del__ = lambda self : None;
Image_uint32_swigregister = _cHalide.Image_uint32_swigregister
Image_uint32_swigregister(Image_uint32)

class Image_int8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image_int8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image_int8, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Image_int8(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy_to_host(self): return _cHalide.Image_int8_copy_to_host(self)
    def set_host_dirty(self, dirty=True): return _cHalide.Image_int8_set_host_dirty(self, dirty)
    def defined(self): return _cHalide.Image_int8_defined(self)
    def dimensions(self): return _cHalide.Image_int8_dimensions(self)
    def extent(self, *args): return _cHalide.Image_int8_extent(self, *args)
    def stride(self, *args): return _cHalide.Image_int8_stride(self, *args)
    def width(self): return _cHalide.Image_int8_width(self)
    def height(self): return _cHalide.Image_int8_height(self)
    def channels(self): return _cHalide.Image_int8_channels(self)
    def data(self): return _cHalide.Image_int8_data(self)
    def __call__(self, *args): return _cHalide.Image_int8___call__(self, *args)
    __swig_destroy__ = _cHalide.delete_Image_int8
    __del__ = lambda self : None;
Image_int8_swigregister = _cHalide.Image_int8_swigregister
Image_int8_swigregister(Image_int8)

class Image_int16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image_int16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image_int16, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Image_int16(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy_to_host(self): return _cHalide.Image_int16_copy_to_host(self)
    def set_host_dirty(self, dirty=True): return _cHalide.Image_int16_set_host_dirty(self, dirty)
    def defined(self): return _cHalide.Image_int16_defined(self)
    def dimensions(self): return _cHalide.Image_int16_dimensions(self)
    def extent(self, *args): return _cHalide.Image_int16_extent(self, *args)
    def stride(self, *args): return _cHalide.Image_int16_stride(self, *args)
    def width(self): return _cHalide.Image_int16_width(self)
    def height(self): return _cHalide.Image_int16_height(self)
    def channels(self): return _cHalide.Image_int16_channels(self)
    def data(self): return _cHalide.Image_int16_data(self)
    def __call__(self, *args): return _cHalide.Image_int16___call__(self, *args)
    __swig_destroy__ = _cHalide.delete_Image_int16
    __del__ = lambda self : None;
Image_int16_swigregister = _cHalide.Image_int16_swigregister
Image_int16_swigregister(Image_int16)

class Image_int32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image_int32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image_int32, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Image_int32(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy_to_host(self): return _cHalide.Image_int32_copy_to_host(self)
    def set_host_dirty(self, dirty=True): return _cHalide.Image_int32_set_host_dirty(self, dirty)
    def defined(self): return _cHalide.Image_int32_defined(self)
    def dimensions(self): return _cHalide.Image_int32_dimensions(self)
    def extent(self, *args): return _cHalide.Image_int32_extent(self, *args)
    def stride(self, *args): return _cHalide.Image_int32_stride(self, *args)
    def width(self): return _cHalide.Image_int32_width(self)
    def height(self): return _cHalide.Image_int32_height(self)
    def channels(self): return _cHalide.Image_int32_channels(self)
    def data(self): return _cHalide.Image_int32_data(self)
    def __call__(self, *args): return _cHalide.Image_int32___call__(self, *args)
    __swig_destroy__ = _cHalide.delete_Image_int32
    __del__ = lambda self : None;
Image_int32_swigregister = _cHalide.Image_int32_swigregister
Image_int32_swigregister(Image_int32)

class Image_float32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image_float32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image_float32, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Image_float32(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy_to_host(self): return _cHalide.Image_float32_copy_to_host(self)
    def set_host_dirty(self, dirty=True): return _cHalide.Image_float32_set_host_dirty(self, dirty)
    def defined(self): return _cHalide.Image_float32_defined(self)
    def dimensions(self): return _cHalide.Image_float32_dimensions(self)
    def extent(self, *args): return _cHalide.Image_float32_extent(self, *args)
    def stride(self, *args): return _cHalide.Image_float32_stride(self, *args)
    def width(self): return _cHalide.Image_float32_width(self)
    def height(self): return _cHalide.Image_float32_height(self)
    def channels(self): return _cHalide.Image_float32_channels(self)
    def data(self): return _cHalide.Image_float32_data(self)
    def __call__(self, *args): return _cHalide.Image_float32___call__(self, *args)
    __swig_destroy__ = _cHalide.delete_Image_float32
    __del__ = lambda self : None;
Image_float32_swigregister = _cHalide.Image_float32_swigregister
Image_float32_swigregister(Image_float32)

class Image_float64(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image_float64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image_float64, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Image_float64(*args)
        try: self.this.append(this)
        except: self.this = this
    def copy_to_host(self): return _cHalide.Image_float64_copy_to_host(self)
    def set_host_dirty(self, dirty=True): return _cHalide.Image_float64_set_host_dirty(self, dirty)
    def defined(self): return _cHalide.Image_float64_defined(self)
    def dimensions(self): return _cHalide.Image_float64_dimensions(self)
    def extent(self, *args): return _cHalide.Image_float64_extent(self, *args)
    def stride(self, *args): return _cHalide.Image_float64_stride(self, *args)
    def width(self): return _cHalide.Image_float64_width(self)
    def height(self): return _cHalide.Image_float64_height(self)
    def channels(self): return _cHalide.Image_float64_channels(self)
    def data(self): return _cHalide.Image_float64_data(self)
    def __call__(self, *args): return _cHalide.Image_float64___call__(self, *args)
    __swig_destroy__ = _cHalide.delete_Image_float64
    __del__ = lambda self : None;
Image_float64_swigregister = _cHalide.Image_float64_swigregister
Image_float64_swigregister(Image_float64)

class Param_uint8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param_uint8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param_uint8, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Param_uint8(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _cHalide.Param_uint8_name(self)
    def get(self): return _cHalide.Param_uint8_get(self)
    def set(self, *args): return _cHalide.Param_uint8_set(self, *args)
    def type(self): return _cHalide.Param_uint8_type(self)
    __swig_destroy__ = _cHalide.delete_Param_uint8
    __del__ = lambda self : None;
Param_uint8_swigregister = _cHalide.Param_uint8_swigregister
Param_uint8_swigregister(Param_uint8)

class Param_uint16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param_uint16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param_uint16, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Param_uint16(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _cHalide.Param_uint16_name(self)
    def get(self): return _cHalide.Param_uint16_get(self)
    def set(self, *args): return _cHalide.Param_uint16_set(self, *args)
    def type(self): return _cHalide.Param_uint16_type(self)
    __swig_destroy__ = _cHalide.delete_Param_uint16
    __del__ = lambda self : None;
Param_uint16_swigregister = _cHalide.Param_uint16_swigregister
Param_uint16_swigregister(Param_uint16)

class Param_uint32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param_uint32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param_uint32, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Param_uint32(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _cHalide.Param_uint32_name(self)
    def get(self): return _cHalide.Param_uint32_get(self)
    def set(self, *args): return _cHalide.Param_uint32_set(self, *args)
    def type(self): return _cHalide.Param_uint32_type(self)
    __swig_destroy__ = _cHalide.delete_Param_uint32
    __del__ = lambda self : None;
Param_uint32_swigregister = _cHalide.Param_uint32_swigregister
Param_uint32_swigregister(Param_uint32)

class Param_int8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param_int8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param_int8, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Param_int8(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _cHalide.Param_int8_name(self)
    def get(self): return _cHalide.Param_int8_get(self)
    def set(self, *args): return _cHalide.Param_int8_set(self, *args)
    def type(self): return _cHalide.Param_int8_type(self)
    __swig_destroy__ = _cHalide.delete_Param_int8
    __del__ = lambda self : None;
Param_int8_swigregister = _cHalide.Param_int8_swigregister
Param_int8_swigregister(Param_int8)

class Param_int16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param_int16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param_int16, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Param_int16(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _cHalide.Param_int16_name(self)
    def get(self): return _cHalide.Param_int16_get(self)
    def set(self, *args): return _cHalide.Param_int16_set(self, *args)
    def type(self): return _cHalide.Param_int16_type(self)
    __swig_destroy__ = _cHalide.delete_Param_int16
    __del__ = lambda self : None;
Param_int16_swigregister = _cHalide.Param_int16_swigregister
Param_int16_swigregister(Param_int16)

class Param_int32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param_int32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param_int32, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Param_int32(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _cHalide.Param_int32_name(self)
    def get(self): return _cHalide.Param_int32_get(self)
    def set(self, *args): return _cHalide.Param_int32_set(self, *args)
    def type(self): return _cHalide.Param_int32_type(self)
    __swig_destroy__ = _cHalide.delete_Param_int32
    __del__ = lambda self : None;
Param_int32_swigregister = _cHalide.Param_int32_swigregister
Param_int32_swigregister(Param_int32)

class Param_float32(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param_float32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param_float32, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Param_float32(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _cHalide.Param_float32_name(self)
    def get(self): return _cHalide.Param_float32_get(self)
    def set(self, *args): return _cHalide.Param_float32_set(self, *args)
    def type(self): return _cHalide.Param_float32_type(self)
    __swig_destroy__ = _cHalide.delete_Param_float32
    __del__ = lambda self : None;
Param_float32_swigregister = _cHalide.Param_float32_swigregister
Param_float32_swigregister(Param_float32)

class Param_float64(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param_float64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param_float64, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cHalide.new_Param_float64(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _cHalide.Param_float64_name(self)
    def get(self): return _cHalide.Param_float64_get(self)
    def set(self, *args): return _cHalide.Param_float64_set(self, *args)
    def type(self): return _cHalide.Param_float64_type(self)
    __swig_destroy__ = _cHalide.delete_Param_float64
    __del__ = lambda self : None;
Param_float64_swigregister = _cHalide.Param_float64_swigregister
Param_float64_swigregister(Param_float64)

class ListExpr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListExpr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListExpr, name)
    __repr__ = _swig_repr
    def iterator(self): return _cHalide.ListExpr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cHalide.ListExpr___nonzero__(self)
    def __bool__(self): return _cHalide.ListExpr___bool__(self)
    def __len__(self): return _cHalide.ListExpr___len__(self)
    def pop(self): return _cHalide.ListExpr_pop(self)
    def __getslice__(self, *args): return _cHalide.ListExpr___getslice__(self, *args)
    def __setslice__(self, *args): return _cHalide.ListExpr___setslice__(self, *args)
    def __delslice__(self, *args): return _cHalide.ListExpr___delslice__(self, *args)
    def __delitem__(self, *args): return _cHalide.ListExpr___delitem__(self, *args)
    def __getitem__(self, *args): return _cHalide.ListExpr___getitem__(self, *args)
    def __setitem__(self, *args): return _cHalide.ListExpr___setitem__(self, *args)
    def append(self, *args): return _cHalide.ListExpr_append(self, *args)
    def empty(self): return _cHalide.ListExpr_empty(self)
    def size(self): return _cHalide.ListExpr_size(self)
    def clear(self): return _cHalide.ListExpr_clear(self)
    def swap(self, *args): return _cHalide.ListExpr_swap(self, *args)
    def get_allocator(self): return _cHalide.ListExpr_get_allocator(self)
    def begin(self): return _cHalide.ListExpr_begin(self)
    def end(self): return _cHalide.ListExpr_end(self)
    def rbegin(self): return _cHalide.ListExpr_rbegin(self)
    def rend(self): return _cHalide.ListExpr_rend(self)
    def pop_back(self): return _cHalide.ListExpr_pop_back(self)
    def erase(self, *args): return _cHalide.ListExpr_erase(self, *args)
    def __init__(self, *args): 
        this = _cHalide.new_ListExpr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cHalide.ListExpr_push_back(self, *args)
    def front(self): return _cHalide.ListExpr_front(self)
    def back(self): return _cHalide.ListExpr_back(self)
    def assign(self, *args): return _cHalide.ListExpr_assign(self, *args)
    def resize(self, *args): return _cHalide.ListExpr_resize(self, *args)
    def insert(self, *args): return _cHalide.ListExpr_insert(self, *args)
    def reserve(self, *args): return _cHalide.ListExpr_reserve(self, *args)
    def capacity(self): return _cHalide.ListExpr_capacity(self)
    __swig_destroy__ = _cHalide.delete_ListExpr
    __del__ = lambda self : None;
ListExpr_swigregister = _cHalide.ListExpr_swigregister
ListExpr_swigregister(ListExpr)

class ListVar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListVar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListVar, name)
    __repr__ = _swig_repr
    def iterator(self): return _cHalide.ListVar_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cHalide.ListVar___nonzero__(self)
    def __bool__(self): return _cHalide.ListVar___bool__(self)
    def __len__(self): return _cHalide.ListVar___len__(self)
    def pop(self): return _cHalide.ListVar_pop(self)
    def __getslice__(self, *args): return _cHalide.ListVar___getslice__(self, *args)
    def __setslice__(self, *args): return _cHalide.ListVar___setslice__(self, *args)
    def __delslice__(self, *args): return _cHalide.ListVar___delslice__(self, *args)
    def __delitem__(self, *args): return _cHalide.ListVar___delitem__(self, *args)
    def __getitem__(self, *args): return _cHalide.ListVar___getitem__(self, *args)
    def __setitem__(self, *args): return _cHalide.ListVar___setitem__(self, *args)
    def append(self, *args): return _cHalide.ListVar_append(self, *args)
    def empty(self): return _cHalide.ListVar_empty(self)
    def size(self): return _cHalide.ListVar_size(self)
    def clear(self): return _cHalide.ListVar_clear(self)
    def swap(self, *args): return _cHalide.ListVar_swap(self, *args)
    def get_allocator(self): return _cHalide.ListVar_get_allocator(self)
    def begin(self): return _cHalide.ListVar_begin(self)
    def end(self): return _cHalide.ListVar_end(self)
    def rbegin(self): return _cHalide.ListVar_rbegin(self)
    def rend(self): return _cHalide.ListVar_rend(self)
    def pop_back(self): return _cHalide.ListVar_pop_back(self)
    def erase(self, *args): return _cHalide.ListVar_erase(self, *args)
    def __init__(self, *args): 
        this = _cHalide.new_ListVar(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cHalide.ListVar_push_back(self, *args)
    def front(self): return _cHalide.ListVar_front(self)
    def back(self): return _cHalide.ListVar_back(self)
    def assign(self, *args): return _cHalide.ListVar_assign(self, *args)
    def resize(self, *args): return _cHalide.ListVar_resize(self, *args)
    def insert(self, *args): return _cHalide.ListVar_insert(self, *args)
    def reserve(self, *args): return _cHalide.ListVar_reserve(self, *args)
    def capacity(self): return _cHalide.ListVar_capacity(self)
    __swig_destroy__ = _cHalide.delete_ListVar
    __del__ = lambda self : None;
ListVar_swigregister = _cHalide.ListVar_swigregister
ListVar_swigregister(ListVar)

class ListFunc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListFunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListFunc, name)
    __repr__ = _swig_repr
    def iterator(self): return _cHalide.ListFunc_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cHalide.ListFunc___nonzero__(self)
    def __bool__(self): return _cHalide.ListFunc___bool__(self)
    def __len__(self): return _cHalide.ListFunc___len__(self)
    def pop(self): return _cHalide.ListFunc_pop(self)
    def __getslice__(self, *args): return _cHalide.ListFunc___getslice__(self, *args)
    def __setslice__(self, *args): return _cHalide.ListFunc___setslice__(self, *args)
    def __delslice__(self, *args): return _cHalide.ListFunc___delslice__(self, *args)
    def __delitem__(self, *args): return _cHalide.ListFunc___delitem__(self, *args)
    def __getitem__(self, *args): return _cHalide.ListFunc___getitem__(self, *args)
    def __setitem__(self, *args): return _cHalide.ListFunc___setitem__(self, *args)
    def append(self, *args): return _cHalide.ListFunc_append(self, *args)
    def empty(self): return _cHalide.ListFunc_empty(self)
    def size(self): return _cHalide.ListFunc_size(self)
    def clear(self): return _cHalide.ListFunc_clear(self)
    def swap(self, *args): return _cHalide.ListFunc_swap(self, *args)
    def get_allocator(self): return _cHalide.ListFunc_get_allocator(self)
    def begin(self): return _cHalide.ListFunc_begin(self)
    def end(self): return _cHalide.ListFunc_end(self)
    def rbegin(self): return _cHalide.ListFunc_rbegin(self)
    def rend(self): return _cHalide.ListFunc_rend(self)
    def pop_back(self): return _cHalide.ListFunc_pop_back(self)
    def erase(self, *args): return _cHalide.ListFunc_erase(self, *args)
    def __init__(self, *args): 
        this = _cHalide.new_ListFunc(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cHalide.ListFunc_push_back(self, *args)
    def front(self): return _cHalide.ListFunc_front(self)
    def back(self): return _cHalide.ListFunc_back(self)
    def assign(self, *args): return _cHalide.ListFunc_assign(self, *args)
    def resize(self, *args): return _cHalide.ListFunc_resize(self, *args)
    def insert(self, *args): return _cHalide.ListFunc_insert(self, *args)
    def reserve(self, *args): return _cHalide.ListFunc_reserve(self, *args)
    def capacity(self): return _cHalide.ListFunc_capacity(self)
    __swig_destroy__ = _cHalide.delete_ListFunc
    __del__ = lambda self : None;
ListFunc_swigregister = _cHalide.ListFunc_swigregister
ListFunc_swigregister(ListFunc)

class ListInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _cHalide.ListInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _cHalide.ListInt___nonzero__(self)
    def __bool__(self): return _cHalide.ListInt___bool__(self)
    def __len__(self): return _cHalide.ListInt___len__(self)
    def pop(self): return _cHalide.ListInt_pop(self)
    def __getslice__(self, *args): return _cHalide.ListInt___getslice__(self, *args)
    def __setslice__(self, *args): return _cHalide.ListInt___setslice__(self, *args)
    def __delslice__(self, *args): return _cHalide.ListInt___delslice__(self, *args)
    def __delitem__(self, *args): return _cHalide.ListInt___delitem__(self, *args)
    def __getitem__(self, *args): return _cHalide.ListInt___getitem__(self, *args)
    def __setitem__(self, *args): return _cHalide.ListInt___setitem__(self, *args)
    def append(self, *args): return _cHalide.ListInt_append(self, *args)
    def empty(self): return _cHalide.ListInt_empty(self)
    def size(self): return _cHalide.ListInt_size(self)
    def clear(self): return _cHalide.ListInt_clear(self)
    def swap(self, *args): return _cHalide.ListInt_swap(self, *args)
    def get_allocator(self): return _cHalide.ListInt_get_allocator(self)
    def begin(self): return _cHalide.ListInt_begin(self)
    def end(self): return _cHalide.ListInt_end(self)
    def rbegin(self): return _cHalide.ListInt_rbegin(self)
    def rend(self): return _cHalide.ListInt_rend(self)
    def pop_back(self): return _cHalide.ListInt_pop_back(self)
    def erase(self, *args): return _cHalide.ListInt_erase(self, *args)
    def __init__(self, *args): 
        this = _cHalide.new_ListInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _cHalide.ListInt_push_back(self, *args)
    def front(self): return _cHalide.ListInt_front(self)
    def back(self): return _cHalide.ListInt_back(self)
    def assign(self, *args): return _cHalide.ListInt_assign(self, *args)
    def resize(self, *args): return _cHalide.ListInt_resize(self, *args)
    def insert(self, *args): return _cHalide.ListInt_insert(self, *args)
    def reserve(self, *args): return _cHalide.ListInt_reserve(self, *args)
    def capacity(self): return _cHalide.ListInt_capacity(self)
    __swig_destroy__ = _cHalide.delete_ListInt
    __del__ = lambda self : None;
ListInt_swigregister = _cHalide.ListInt_swigregister
ListInt_swigregister(ListInt)

# This file is compatible with both classic and new-style classes.


