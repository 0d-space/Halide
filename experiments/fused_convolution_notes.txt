SUMMARY
-------
Fusion definitely matters for reducing bandwidth.

Using a small, in-cache (4 scanline) temp buffer, rather than a full-image temp buffer, substantially improves performance on both architectures.

We achieve 3-4.5GB/sec on Woodcrest Core 2 Duo with 1333mhz FSB = 10.6GB/sec/socket.

We achieve ~500MB/sec on OMAP4 Cortex A9 with ~6.4GB/sec LPDDR2 and measured ~1.6GB/sec peak CPU write (~1GB/sec peak read) bandwidth.

Cachegrind simulation suggests that simple (memcpy?) test has 1 write miss per output line and 1 read miss per input line. It's unclear how this factors in allocates of the written data. Presumably "write miss" implies a fetch, and this data is then ultimately written back out, while the read data is silently evicted without a write back.

DETAILS
-------
A9 specs:
http://www.7-cpu.com/cpu/Cortex-A9.html

2x32 bit 800mhz LPDDR2 = 6.4GB/sec

But only 1.6GB/sec peak bandwidth (dense aligned writes)!? Reads circa 1GB/sec or less.

Our results peak at ~500MB/sec:
 
> abadams@omap4:~$ ./a.out 
> 
> Copying input to output: 89.783005 ms
> Memcpy input to output:  81.543007 ms
> Unfused scalar:          274.597015 ms
> Fused scalar:            189.422012 ms
> Fused with memory reuse: 141.724014 ms
> 
> Copying input to output: 89.783005 ms
> Memcpy input to output:  81.665001 ms
> Unfused scalar:          274.871002 ms
> Fused scalar:            190.063004 ms
> Fused with memory reuse: 141.724014 ms
> 
> Copying input to output: 90.057983 ms
> Memcpy input to output:  81.604004 ms
> Unfused scalar:          274.933014 ms
> Fused scalar:            189.911011 ms
> Fused with memory reuse: 141.785004 ms
> abadams@omap4:~$ ./a.out 
> 
> Copying input to output: 97.442001 ms
> Memcpy input to output:  82.519005 ms
> Unfused scalar:          275.513000 ms
> Fused scalar:            191.223007 ms
> Fused with memory reuse: 142.364929 ms
> 
> Copying input to output: 91.523003 ms
> Memcpy input to output:  82.977005 ms
> Unfused scalar:          275.787018 ms
> Fused scalar:            190.430008 ms
> Fused with memory reuse: 142.304001 ms
> 
> Copying input to output: 90.789978 ms
> Memcpy input to output:  82.337006 ms
> Unfused scalar:          275.542999 ms
> Fused scalar:            190.643005 ms
> Fused with memory reuse: 142.456009 ms
> abadams@omap4:~$ g++ fused_convolution.cpp -ffast-math -O3 -mcpu=cortex-a9
> abadams@omap4:~$ ./a.out 
> 
> Fused with memory reuse: 173.187012 ms
> 
> Fused with memory reuse: 173.461975 ms
> 
> Fused with memory reuse: 173.798004 ms

x86 has 7 memory ops in the inner loop.

4 bytes x 640 x 6400 / 64 byte cache lines = 256k lines touched
x 3 channels = 768k seen in:

Cachegrind on bigboy:

> ==30066== I   refs:      219,985,539
> ==30066== I1  misses:          1,140
> ==30066== L2i misses:          1,139
> ==30066== I1  miss rate:        0.00%
> ==30066== L2i miss rate:        0.00%
> ==30066== 
> ==30066== D   refs:       85,270,760  (60,924,381 rd   + 24,346,379 wr)
> ==30066== D1  misses:      1,544,968  (   776,199 rd   +    768,769 wr)
> ==30066== L2d misses:      1,542,060  (   773,646 rd   +    768,414 wr)
> ==30066== D1  miss rate:         1.8% (       1.2%     +        3.1%  )
> ==30066== L2d miss rate:         1.8% (       1.2%     +        3.1%  )
> ==30066== 
> ==30066== L2 refs:         1,546,108  (   777,339 rd   +    768,769 wr)
> ==30066== L2 misses:       1,543,199  (   774,785 rd   +    768,414 wr)
> ==30066== L2 miss rate:          0.5% (       0.2%     +        3.1%  )

On Core 2 Xeon with 667mhz DDR2 x 128bits, seems near bandwidth limited, especially for memcpy, assuming 2 loads and 1 store for each memcpy step (no store-allocate):

> abadams@reptar:~/projects/FImage/cpp_bindings
> $ gcc-4.6 fused_convolution.cpp -std=c++0x -I /usr/local/lib/ocaml/ -lstdc++ -O3 -ffast-math 
> abadams@reptar:~/projects/FImage/cpp_bindings
> $ ./a.out 
> 
> Copying input to output: 42.118004 ms
> Memcpy input to output:  11.926001 ms
> Unfused scalar:          50.240002 ms
> Fused scalar:            32.271000 ms
> Fused with memory reuse: 20.458000 ms
> 
> Copying input to output: 15.896001 ms
> Memcpy input to output:  10.928000 ms
> Unfused scalar:          40.057003 ms
> Fused scalar:            32.243000 ms
> Fused with memory reuse: 20.754002 ms
> 
> Copying input to output: 15.999001 ms
> Memcpy input to output:  11.154000 ms
> Unfused scalar:          39.417969 ms
> Fused scalar:            30.776001 ms
> Fused with memory reuse: 21.033001 ms


2011-10-13 on Reptar:

> Copying input to output: 22.764000 ms
> Memcpy input to output:  11.235000 ms
> Unfused scalar:          49.644001 ms
> Fused scalar:            30.268000 ms
> Fused with memory reuse: 20.598000 ms
> Scanline fusion:         23.521999 ms
> Dynamic scheduling:      31.412001 ms
> 
> Copying input to output: 11.756000 ms
> Memcpy input to output:  9.798000 ms
> Unfused scalar:          37.836975 ms
> Fused scalar:            30.445000 ms
> Fused with memory reuse: 20.625999 ms
> Scanline fusion:         23.367001 ms
> Dynamic scheduling:      31.518999 ms
> 
> Copying input to output: 12.569000 ms
> Memcpy input to output:  9.674000 ms
> Unfused scalar:          38.908001 ms
> Fused scalar:            30.480000 ms
> Fused with memory reuse: 20.525999 ms
> Scanline fusion:         23.396999 ms
> Dynamic scheduling:      31.327999 ms

2011-10-13 Nehalem (with 4 sockets of bandwidth driving 1 core) behaves very differently

> jrk@bigboy:~/FImage/experiments$ ./a.out 
>
> Copying input to output: 12.193000 ms
> Memcpy input to output:  16.731001 ms
> Unfused scalar:          26.045000 ms
> Fused scalar:            29.362000 ms
> Fused with memory reuse: 24.650999 ms
> Scanline fusion:         10.616000 ms
> Dynamic scheduling:      31.084000 ms
> 
> Copying input to output: 5.207000 ms
> Memcpy input to output:  11.079000 ms
> Unfused scalar:          25.926025 ms
> Fused scalar:            29.416000 ms
> Fused with memory reuse: 24.684000 ms
> Scanline fusion:         12.191000 ms
> Dynamic scheduling:      34.330002 ms
> 
> Copying input to output: 5.288000 ms
> Memcpy input to output:  11.117000 ms
> Unfused scalar:          27.430000 ms
> Fused scalar:            29.247999 ms
> Fused with memory reuse: 24.627001 ms
> Scanline fusion:         10.669000 ms
> Dynamic scheduling:      30.566999 ms

bigboy with 64 parallel processes to eat bandwidth:

> Copying input to output: 120.204002 ms
> Memcpy input to output:  194.841980 ms
> Unfused scalar:          234.345001 ms
> Fused scalar:            196.076996 ms
> Fused with memory reuse: 109.306000 ms
> Scanline fusion:         109.264000 ms
> Dynamic scheduling:      110.752991 ms
> 
> Copying input to output: 94.914001 ms
> Memcpy input to output:  99.106003 ms
> Unfused scalar:          223.884003 ms
> Fused scalar:            179.865005 ms
> Fused with memory reuse: 97.263977 ms
> Scanline fusion:         97.541000 ms
> Dynamic scheduling:      101.578003 ms
> 
> Copying input to output: 78.621002 ms
> Memcpy input to output:  86.837997 ms
> Unfused scalar:          226.574005 ms
> Fused scalar:            188.838989 ms
> Fused with memory reuse: 108.750000 ms
> Scanline fusion:         108.593002 ms
> Dynamic scheduling:      112.177002 ms


2011-10-13 on jrk@luxosr:

> Copying input to output: 16.809000 ms
> Memcpy input to output:  7.275000 ms
> Unfused scalar:          45.813999 ms
> Fused scalar:            31.362000 ms
> Fused with memory reuse: 20.715000 ms
> Scanline fusion:         23.165001 ms
> Dynamic scheduling:      33.464001 ms
> 
> Copying input to output: 11.450000 ms
> Memcpy input to output:  7.260000 ms
> Unfused scalar:          39.439999 ms
> Fused scalar:            31.427000 ms
> Fused with memory reuse: 20.693001 ms
> Scanline fusion:         23.170000 ms
> Dynamic scheduling:      33.598000 ms
> 
> Copying input to output: 10.991000 ms
> Memcpy input to output:  7.185000 ms
> Unfused scalar:          39.275002 ms
> Fused scalar:            31.562000 ms
> Fused with memory reuse: 20.773001 ms
> Scanline fusion:         23.183001 ms
> Dynamic scheduling:      33.490002 ms

2011-10-13 on omap4 (simple gcc -O3):

> Copying input to output: 152.923996 ms
> Memcpy input to output:  99.945000 ms
> Unfused scalar:          309.631989 ms
> Fused scalar:            220.886993 ms
> Fused with memory reuse: 173.675003 ms
> Scanline fusion:         220.367004 ms
> Dynamic scheduling:      245.910995 ms
> 
> Copying input to output: 152.068970 ms
> Memcpy input to output:  100.005997 ms
> Unfused scalar:          308.807007 ms
> Fused scalar:            212.981995 ms
> Fused with memory reuse: 173.186996 ms
> Scanline fusion:         222.289993 ms
> Dynamic scheduling:      245.971985 ms
> 
> Copying input to output: 152.436005 ms
> Memcpy input to output:  100.037003 ms
> Unfused scalar:          308.562988 ms
> Fused scalar:            213.227005 ms
> Fused with memory reuse: 173.798004 ms
> Scanline fusion:         220.612000 ms
> Dynamic scheduling:      246.582001 ms


TODO
----
Some compiler optimization variants people recommend:

-mcpu=cortex-a9 -fprefetch-loop-arrays -mfpu=vfp3 -O3 

or:

-O3 -march=armv7-a -ftree-vectorize -fprefetch-loop-arrays 
-funroll-loops

and -mfpu=neon 
or -mvectorize-with-neon-quad 
