//
// local_laplacian.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#ifndef ISPC_LOCAL_LAPLACIAN_H
#define ISPC_LOCAL_LAPLACIAN_H

#include <stdint.h>

#ifdef __cplusplus
namespace ispc {
#endif // __cplusplus


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#ifdef __cplusplus
extern "C" {
#endif // __cplusplus
    extern void add_in_place(int32_t width, int32_t height, const float * input, float * output);
    extern void downsample_x(int32_t width, int32_t height, const float * input, float * output);
    extern void downsample_y(int32_t width, int32_t height, const float * input, float * output);
    extern void float_to_uint16(int32_t width, int32_t height, const float * input, uint16_t * output);
    extern void make_output_pyramid(int32_t width, int32_t height, int32_t levels, const float * inGPyramid, const float * lPyramid, float * olPyramid);
    extern void make_remap_lut(int32_t levels, float alpha, float * output);
    extern void reintroduce_color(int32_t width, int32_t height, const float * new_luma, const float * old_luma, const float * chroma, float * output);
    extern void remap(int32_t width, int32_t height, int32_t levels, int32_t k, float beta, const float * input, const float * lut, float * output);
    extern void rev_subtract_in_place(int32_t width, int32_t height, const float * input, float * output);
    extern void rgb2gray(int32_t width, int32_t height, const float * input, float * output);
    extern void uint16_to_float(int32_t width, int32_t height, const uint16_t * input, float * output);
    extern void upsample_x(int32_t width, int32_t height, const float * input, float * output);
    extern void upsample_y(int32_t width, int32_t height, const float * input, float * output);
#ifdef __cplusplus
}
#endif // __cplusplus

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // ISPC_LOCAL_LAPLACIAN_H
