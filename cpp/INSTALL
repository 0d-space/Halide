------------------------------------------------------------------
Dependencies
------------------------------------------------------------------

Building halide requires llvm 3.2, along with the matching version of
clang. llvm-config and clang must be somewhere in the path. If your OS
does not have packages for llvm-3.2, you can find binaries for it at
http://llvm.org/releases/download.html. Download an appropriate
package and then either install it, or at least put the bin
subdirectory in your path. (This works well on OS X and Ubuntu.)

If you want to build it yourself, first check it out from subversions:

svn co https://llvm.org/svn/llvm-project/llvm/branches/release_32 llvm3.2
svn co https://llvm.org/svn/llvm-project/cfe/branches/release_32 llvm3.2/tools/clang

Then build it like so:

cd llvm3.2
./configure --enable-optimized --with-clang
make -j8

Then finally put it in the path like so:

export PATH=<path to llvm3.2>/Release+Asserts/bin:$PATH

Newer versions of llvm may also work. Support for these is
experimental.

------------------------------------------------------------------
Building Halide
------------------------------------------------------------------

With llvm-config and clang in your path, you should be able to just
run 'make' in this directory. 'make tests' will run the JIT test
suite, and 'make test_apps' will make sure all the apps compile and
run (but won't check their output).

There is no 'make install' or 'make distrib' yet. If you want to make
an install package, grab bin/libHalide.a and bin/libHalide.so, and all
the header files in src.

------------------------------------------------------------------
Building Halide with Native Client support
------------------------------------------------------------------

Compiling to Native Client is an experimental feature. JIT compilation
is not supported, only generating object files. Only native targets
are supported, not Portable Native Client (PNaCl). The PNaCl llvm tree
is used as it contains required llvm headers and libraries for compiling
to the Native Client target.

In order to build Halide with Native Client support, one will need the
PNaCl llvm tree from:
    http://git.chromium.org/native_client/pnacl-llvm.git

It will likely be required to get the entire dev tree for
PNaCl. Documentation for this is here:
    http://www.chromium.org/nativeclient/pnacl/developing-pnacl

A standard Native Client tree will also be required for the C library
includes to build the runtime initial modules. (Only glibc has been
tried, not newlib.) Likely the easiest way to get this is to download
the Native Client SDK from here:
    https://developers.google.com/native-client/sdk/

Once The Native Client prerequesites are in place, make the following
changes to the top-level Makefile:
 - Change WITH_NATIVE_CLIENT to "true" (or any non-empty value)
 - Set NATIVE_CLIENT_ROOT to the top-level directory of your Native Client
   SDK install. There should be a directory called "toolchain" inside the
   root directory.
 - Add $NATIVE_CLIENT_ROOT/toolchain/pnacl_mac_x86/host_x86_64/bin/ to the
   start of the PATH. (Where NATIVE_CLIENT_ROOT is as decribed in the
   previous Makefile modification item. This presumes the entire PNaCl
   toolchain has been built and installed. There are likely other approaches.)
 - It will likely be required to remove CodeGen_PTX* from the build and "nvptx"
   from the LIBS setup as well unless one reconfigures the PNaCl llvm build to
   include the nvptx target.

After these changes, run make. This will build a Halide lib capable of
generating native client objects. Niether the tests nor the apps
Makefile shave been updated to work with cross compilation however.

ARM native client has not been tested yet.
